// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: api/proto/payment/payment.proto

package payment

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PaymentServiceClient is the client API for PaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentServiceClient interface {
	CreateLiveEventOrder(ctx context.Context, in *CreateLiveEventOrderRequest, opts ...grpc.CallOption) (*CreateLiveEventOrderResponse, error)
	CreateUserPoints(ctx context.Context, in *CreateUserPointsRequest, opts ...grpc.CallOption) (*CreateUserPointsResponse, error)
	CreateUserPointsCompensate(ctx context.Context, in *CreateUserPointsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SucceedLiveEventOrder(ctx context.Context, in *SucceedLiveEventOrderRequest, opts ...grpc.CallOption) (*SucceedLiveEventOrderResponse, error)
	SucceedLiveEventOrderCompensate(ctx context.Context, in *SucceedLiveEventOrderRequest, opts ...grpc.CallOption) (*SucceedLiveEventOrderResponse, error)
	GetUserPoints(ctx context.Context, in *GetUserPointsRequest, opts ...grpc.CallOption) (*GetUserPointsResponse, error)
}

type paymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentServiceClient(cc grpc.ClientConnInterface) PaymentServiceClient {
	return &paymentServiceClient{cc}
}

func (c *paymentServiceClient) CreateLiveEventOrder(ctx context.Context, in *CreateLiveEventOrderRequest, opts ...grpc.CallOption) (*CreateLiveEventOrderResponse, error) {
	out := new(CreateLiveEventOrderResponse)
	err := c.cc.Invoke(ctx, "/api.proto.payment.PaymentService/CreateLiveEventOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) CreateUserPoints(ctx context.Context, in *CreateUserPointsRequest, opts ...grpc.CallOption) (*CreateUserPointsResponse, error) {
	out := new(CreateUserPointsResponse)
	err := c.cc.Invoke(ctx, "/api.proto.payment.PaymentService/CreateUserPoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) CreateUserPointsCompensate(ctx context.Context, in *CreateUserPointsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.proto.payment.PaymentService/CreateUserPointsCompensate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) SucceedLiveEventOrder(ctx context.Context, in *SucceedLiveEventOrderRequest, opts ...grpc.CallOption) (*SucceedLiveEventOrderResponse, error) {
	out := new(SucceedLiveEventOrderResponse)
	err := c.cc.Invoke(ctx, "/api.proto.payment.PaymentService/SucceedLiveEventOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) SucceedLiveEventOrderCompensate(ctx context.Context, in *SucceedLiveEventOrderRequest, opts ...grpc.CallOption) (*SucceedLiveEventOrderResponse, error) {
	out := new(SucceedLiveEventOrderResponse)
	err := c.cc.Invoke(ctx, "/api.proto.payment.PaymentService/SucceedLiveEventOrderCompensate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetUserPoints(ctx context.Context, in *GetUserPointsRequest, opts ...grpc.CallOption) (*GetUserPointsResponse, error) {
	out := new(GetUserPointsResponse)
	err := c.cc.Invoke(ctx, "/api.proto.payment.PaymentService/GetUserPoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServiceServer is the server API for PaymentService service.
// All implementations must embed UnimplementedPaymentServiceServer
// for forward compatibility
type PaymentServiceServer interface {
	CreateLiveEventOrder(context.Context, *CreateLiveEventOrderRequest) (*CreateLiveEventOrderResponse, error)
	CreateUserPoints(context.Context, *CreateUserPointsRequest) (*CreateUserPointsResponse, error)
	CreateUserPointsCompensate(context.Context, *CreateUserPointsRequest) (*emptypb.Empty, error)
	SucceedLiveEventOrder(context.Context, *SucceedLiveEventOrderRequest) (*SucceedLiveEventOrderResponse, error)
	SucceedLiveEventOrderCompensate(context.Context, *SucceedLiveEventOrderRequest) (*SucceedLiveEventOrderResponse, error)
	GetUserPoints(context.Context, *GetUserPointsRequest) (*GetUserPointsResponse, error)
	mustEmbedUnimplementedPaymentServiceServer()
}

// UnimplementedPaymentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPaymentServiceServer struct {
}

func (UnimplementedPaymentServiceServer) CreateLiveEventOrder(context.Context, *CreateLiveEventOrderRequest) (*CreateLiveEventOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLiveEventOrder not implemented")
}
func (UnimplementedPaymentServiceServer) CreateUserPoints(context.Context, *CreateUserPointsRequest) (*CreateUserPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserPoints not implemented")
}
func (UnimplementedPaymentServiceServer) CreateUserPointsCompensate(context.Context, *CreateUserPointsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserPointsCompensate not implemented")
}
func (UnimplementedPaymentServiceServer) SucceedLiveEventOrder(context.Context, *SucceedLiveEventOrderRequest) (*SucceedLiveEventOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SucceedLiveEventOrder not implemented")
}
func (UnimplementedPaymentServiceServer) SucceedLiveEventOrderCompensate(context.Context, *SucceedLiveEventOrderRequest) (*SucceedLiveEventOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SucceedLiveEventOrderCompensate not implemented")
}
func (UnimplementedPaymentServiceServer) GetUserPoints(context.Context, *GetUserPointsRequest) (*GetUserPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPoints not implemented")
}
func (UnimplementedPaymentServiceServer) mustEmbedUnimplementedPaymentServiceServer() {}

// UnsafePaymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentServiceServer will
// result in compilation errors.
type UnsafePaymentServiceServer interface {
	mustEmbedUnimplementedPaymentServiceServer()
}

func RegisterPaymentServiceServer(s grpc.ServiceRegistrar, srv PaymentServiceServer) {
	s.RegisterService(&PaymentService_ServiceDesc, srv)
}

func _PaymentService_CreateLiveEventOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLiveEventOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).CreateLiveEventOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.proto.payment.PaymentService/CreateLiveEventOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).CreateLiveEventOrder(ctx, req.(*CreateLiveEventOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_CreateUserPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).CreateUserPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.proto.payment.PaymentService/CreateUserPoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).CreateUserPoints(ctx, req.(*CreateUserPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_CreateUserPointsCompensate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).CreateUserPointsCompensate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.proto.payment.PaymentService/CreateUserPointsCompensate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).CreateUserPointsCompensate(ctx, req.(*CreateUserPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_SucceedLiveEventOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SucceedLiveEventOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).SucceedLiveEventOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.proto.payment.PaymentService/SucceedLiveEventOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).SucceedLiveEventOrder(ctx, req.(*SucceedLiveEventOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_SucceedLiveEventOrderCompensate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SucceedLiveEventOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).SucceedLiveEventOrderCompensate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.proto.payment.PaymentService/SucceedLiveEventOrderCompensate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).SucceedLiveEventOrderCompensate(ctx, req.(*SucceedLiveEventOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetUserPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetUserPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.proto.payment.PaymentService/GetUserPoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetUserPoints(ctx, req.(*GetUserPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentService_ServiceDesc is the grpc.ServiceDesc for PaymentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.proto.payment.PaymentService",
	HandlerType: (*PaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLiveEventOrder",
			Handler:    _PaymentService_CreateLiveEventOrder_Handler,
		},
		{
			MethodName: "CreateUserPoints",
			Handler:    _PaymentService_CreateUserPoints_Handler,
		},
		{
			MethodName: "CreateUserPointsCompensate",
			Handler:    _PaymentService_CreateUserPointsCompensate_Handler,
		},
		{
			MethodName: "SucceedLiveEventOrder",
			Handler:    _PaymentService_SucceedLiveEventOrder_Handler,
		},
		{
			MethodName: "SucceedLiveEventOrderCompensate",
			Handler:    _PaymentService_SucceedLiveEventOrderCompensate_Handler,
		},
		{
			MethodName: "GetUserPoints",
			Handler:    _PaymentService_GetUserPoints_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/payment/payment.proto",
}
