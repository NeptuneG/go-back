// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: api/proto/scraper/scraper.proto

package scraper

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScrapeServiceClient is the client API for ScrapeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScrapeServiceClient interface {
	CreateScrapeLiveEventsJob(ctx context.Context, in *CreateScrapeLiveEventsJobRequest, opts ...grpc.CallOption) (*CreateScrapeLiveEventsJobResponse, error)
}

type scrapeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScrapeServiceClient(cc grpc.ClientConnInterface) ScrapeServiceClient {
	return &scrapeServiceClient{cc}
}

func (c *scrapeServiceClient) CreateScrapeLiveEventsJob(ctx context.Context, in *CreateScrapeLiveEventsJobRequest, opts ...grpc.CallOption) (*CreateScrapeLiveEventsJobResponse, error) {
	out := new(CreateScrapeLiveEventsJobResponse)
	err := c.cc.Invoke(ctx, "/api.proto.scraper.ScrapeService/CreateScrapeLiveEventsJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScrapeServiceServer is the server API for ScrapeService service.
// All implementations must embed UnimplementedScrapeServiceServer
// for forward compatibility
type ScrapeServiceServer interface {
	CreateScrapeLiveEventsJob(context.Context, *CreateScrapeLiveEventsJobRequest) (*CreateScrapeLiveEventsJobResponse, error)
	mustEmbedUnimplementedScrapeServiceServer()
}

// UnimplementedScrapeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedScrapeServiceServer struct {
}

func (UnimplementedScrapeServiceServer) CreateScrapeLiveEventsJob(context.Context, *CreateScrapeLiveEventsJobRequest) (*CreateScrapeLiveEventsJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScrapeLiveEventsJob not implemented")
}
func (UnimplementedScrapeServiceServer) mustEmbedUnimplementedScrapeServiceServer() {}

// UnsafeScrapeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScrapeServiceServer will
// result in compilation errors.
type UnsafeScrapeServiceServer interface {
	mustEmbedUnimplementedScrapeServiceServer()
}

func RegisterScrapeServiceServer(s grpc.ServiceRegistrar, srv ScrapeServiceServer) {
	s.RegisterService(&ScrapeService_ServiceDesc, srv)
}

func _ScrapeService_CreateScrapeLiveEventsJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScrapeLiveEventsJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScrapeServiceServer).CreateScrapeLiveEventsJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.proto.scraper.ScrapeService/CreateScrapeLiveEventsJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScrapeServiceServer).CreateScrapeLiveEventsJob(ctx, req.(*CreateScrapeLiveEventsJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScrapeService_ServiceDesc is the grpc.ServiceDesc for ScrapeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScrapeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.proto.scraper.ScrapeService",
	HandlerType: (*ScrapeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateScrapeLiveEventsJob",
			Handler:    _ScrapeService_CreateScrapeLiveEventsJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/scraper/scraper.proto",
}
