// Code generated by sqlc. DO NOT EDIT.
// source: live_events.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createLiveEvent = `-- name: CreateLiveEvent :one
INSERT INTO live_events (
  live_house_id, title, url,
  description, price_info,
  stage_one_open_at, stage_one_start_at,
  stage_two_open_at, stage_two_start_at
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, live_house_id, title, url, description, price_info, stage_one_open_at, stage_one_start_at, stage_two_open_at, stage_two_start_at, slug, created_at, updated_at
`

type CreateLiveEventParams struct {
	LiveHouseID     uuid.UUID      `json:"liveHouseID"`
	Title           string         `json:"title"`
	Url             string         `json:"url"`
	Description     sql.NullString `json:"description"`
	PriceInfo       sql.NullString `json:"priceInfo"`
	StageOneOpenAt  sql.NullTime   `json:"stageOneOpenAt"`
	StageOneStartAt time.Time      `json:"stageOneStartAt"`
	StageTwoOpenAt  sql.NullTime   `json:"stageTwoOpenAt"`
	StageTwoStartAt sql.NullTime   `json:"stageTwoStartAt"`
}

func (q *Queries) CreateLiveEvent(ctx context.Context, arg CreateLiveEventParams) (LiveEvent, error) {
	row := q.queryRow(ctx, q.createLiveEventStmt, createLiveEvent,
		arg.LiveHouseID,
		arg.Title,
		arg.Url,
		arg.Description,
		arg.PriceInfo,
		arg.StageOneOpenAt,
		arg.StageOneStartAt,
		arg.StageTwoOpenAt,
		arg.StageTwoStartAt,
	)
	var i LiveEvent
	err := row.Scan(
		&i.ID,
		&i.LiveHouseID,
		&i.Title,
		&i.Url,
		&i.Description,
		&i.PriceInfo,
		&i.StageOneOpenAt,
		&i.StageOneStartAt,
		&i.StageTwoOpenAt,
		&i.StageTwoStartAt,
		&i.Slug,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLiveEventById = `-- name: GetLiveEventById :one
SELECT id, live_house_id, title, url, description, price_info, stage_one_open_at, stage_one_start_at, stage_two_open_at, stage_two_start_at, slug, created_at, updated_at FROM live_events
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetLiveEventById(ctx context.Context, id uuid.UUID) (LiveEvent, error) {
	row := q.queryRow(ctx, q.getLiveEventByIdStmt, getLiveEventById, id)
	var i LiveEvent
	err := row.Scan(
		&i.ID,
		&i.LiveHouseID,
		&i.Title,
		&i.Url,
		&i.Description,
		&i.PriceInfo,
		&i.StageOneOpenAt,
		&i.StageOneStartAt,
		&i.StageTwoOpenAt,
		&i.StageTwoStartAt,
		&i.Slug,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLiveEventsByLiveHouse = `-- name: GetLiveEventsByLiveHouse :many
SELECT id, live_house_id, title, url, description, price_info, stage_one_open_at, stage_one_start_at, stage_two_open_at, stage_two_start_at, slug, created_at, updated_at FROM live_events
WHERE live_house_id = $1
LIMIT $2
OFFSET $3
`

type GetLiveEventsByLiveHouseParams struct {
	LiveHouseID uuid.UUID `json:"liveHouseID"`
	Limit       int32     `json:"limit"`
	Offset      int32     `json:"offset"`
}

func (q *Queries) GetLiveEventsByLiveHouse(ctx context.Context, arg GetLiveEventsByLiveHouseParams) ([]LiveEvent, error) {
	rows, err := q.query(ctx, q.getLiveEventsByLiveHouseStmt, getLiveEventsByLiveHouse, arg.LiveHouseID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LiveEvent
	for rows.Next() {
		var i LiveEvent
		if err := rows.Scan(
			&i.ID,
			&i.LiveHouseID,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.PriceInfo,
			&i.StageOneOpenAt,
			&i.StageOneStartAt,
			&i.StageTwoOpenAt,
			&i.StageTwoStartAt,
			&i.Slug,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
