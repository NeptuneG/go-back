// Code generated by sqlc. DO NOT EDIT.

package db

import (
	"fmt"
	"time"

	"github.com/NeptuneG/go-back/internal/pkg/db/types"
	"github.com/google/uuid"
)

type State string

const (
	StateCreated  State = "created"
	StatePaid     State = "paid"
	StateRefunded State = "refunded"
	StateFailed   State = "failed"
)

func (e *State) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = State(s)
	case string:
		*e = State(s)
	default:
		return fmt.Errorf("unsupported scan type for State: %T", src)
	}
	return nil
}

type LiveEventOrder struct {
	ID          uuid.UUID `json:"id"`
	UserID      uuid.UUID `json:"user_id"`
	LiveEventID uuid.UUID `json:"live_event_id"`
	Price       int32     `json:"price"`
	UserPoints  int32     `json:"user_points"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
	State       State     `json:"state"`
}

type UserPoint struct {
	ID          uuid.UUID        `json:"id"`
	UserID      uuid.UUID        `json:"user_id"`
	Points      int32            `json:"points"`
	Description types.NullString `json:"description"`
	OrderType   string           `json:"order_type"`
	OrderID     uuid.UUID        `json:"order_id"`
	CreatedAt   time.Time        `json:"created_at"`
	UpdatedAt   time.Time        `json:"updated_at"`
	TxID        types.NullString `json:"tx_id"`
}
