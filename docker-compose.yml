version: "3.9"
x-svc-setting: &service
  volumes:
    - .:/go/src/github.com/NeptuneG/go-back
  entrypoint: ["air", "-c", ".air.toml"]
  security_opt:
    - seccomp:unconfined
  stdin_open: true
  tty: true
  env_file:
    - ".env"

services:
  gateway-service:
    <<: *service
    container_name: gateway-service
    build:
      context: .
      dockerfile: ./services/gateway/Dockerfile
      target: dev
    ports:
      - "4000:4000"
      - "2347:2345"
    links:
      - user-service
      - live-service
      - scraper-service
      - payment-service
  user-service:
    <<: *service
    container_name: user-service
    build:
      context: .
      dockerfile: ./services/user/Dockerfile
      target: dev
    ports:
      - "2346:2345"
    links:
      - db
    environment:
      DB_NAME: user_development
  live-service:
    <<: *service
    container_name: live-service
    build:
      context: .
      dockerfile: ./services/live/Dockerfile
      target: dev
    ports:
      - "2348:2345"
    links:
      - db
    environment:
      DB_NAME: live_development
  payment-service:
    <<: *service
    container_name: payment-service
    build:
      context: .
      dockerfile: ./services/payment/Dockerfile
      target: dev
    ports:
      - "2350:2345"
    links:
      - db
    environment:
      DB_NAME: payment_development
      GRPC_GO_RETRY: on
  scraper-service:
    <<: *service
    container_name: scraper-service
    build:
      context: .
      dockerfile: ./services/scraper/Dockerfile
      target: dev
    ports:
      - "2349:2345"
    links:
      - faktory
      - redis-mq
  db:
    image: postgres:14.1-alpine3.14
    container_name: go-back-db
    ports:
      - "5433:5432"
    environment:
      TZ: 'Asia/Tokyo'
      POSTGRES_USER: dev
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - db-data:/var/lib/postgresql/data
  redis-mq:
    container_name: redis-mq
    image: redis:6.2.6-alpine3.14
    ports:
      - "6380:6379"
    volumes:
      - redis-mq-data:/data
  faktory:
    container_name: faktory
    image: contribsys/faktory:latest
    volumes:
      - faktory-data:/var/lib/faktory
    env_file:
      - ".env"
    ports:
      - "7419:7419"
      - "7420:7420"
  faktory-workers:
    container_name: faktory-workers
    build:
      context: ./services/faktory-workers
    volumes:
      - ./services/faktory-workers:/app
    env_file:
      - ".env"
    depends_on:
      - faktory
      - redis-mq
volumes:
  redis-mq-data:
  faktory-data:
  db-data:
