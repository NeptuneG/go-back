// Code generated by sqlc. DO NOT EDIT.
// source: user_points.sql

package db

import (
	"context"

	"github.com/NeptuneG/go-back/pkg/types"
	"github.com/google/uuid"
)

const createUserPoints = `-- name: CreateUserPoints :one
INSERT INTO user_points (
  user_id, points, description, order_id
) VALUES (
  $1, $2, $3, $4
) RETURNING id, user_id, points, description, created_at, updated_at, order_id
`

type CreateUserPointsParams struct {
	UserID      uuid.UUID        `json:"user_id"`
	Points      int32            `json:"points"`
	Description types.NullString `json:"description"`
	OrderID     types.NullUUID   `json:"order_id"`
}

func (q *Queries) CreateUserPoints(ctx context.Context, arg CreateUserPointsParams) (UserPoint, error) {
	row := q.queryRow(ctx, q.createUserPointsStmt, createUserPoints,
		arg.UserID,
		arg.Points,
		arg.Description,
		arg.OrderID,
	)
	var i UserPoint
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Points,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OrderID,
	)
	return i, err
}

const deleteUserPointsByOrderID = `-- name: DeleteUserPointsByOrderID :exec
DELETE FROM user_points WHERE order_id = $1
`

func (q *Queries) DeleteUserPointsByOrderID(ctx context.Context, orderID types.NullUUID) error {
	_, err := q.exec(ctx, q.deleteUserPointsByOrderIDStmt, deleteUserPointsByOrderID, orderID)
	return err
}

const getUserPoints = `-- name: GetUserPoints :one
SELECT SUM(points) FROM user_points WHERE user_id = $1
`

func (q *Queries) GetUserPoints(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.queryRow(ctx, q.getUserPointsStmt, getUserPoints, userID)
	var sum int64
	err := row.Scan(&sum)
	return sum, err
}
