// Code generated by sqlc. DO NOT EDIT.
// source: user_points.sql

package db

import (
	"context"

	"github.com/NeptuneG/go-back/pkg/types"
	"github.com/google/uuid"
)

const createUserPoints = `-- name: CreateUserPoints :one
INSERT INTO user_points (
  user_id, points, description
) VALUES (
  $1, $2, $3
) RETURNING id, user_id, points, description, created_at, updated_at
`

type CreateUserPointsParams struct {
	UserID      uuid.UUID        `json:"user_id"`
	Points      int32            `json:"points"`
	Description types.NullString `json:"description"`
}

func (q *Queries) CreateUserPoints(ctx context.Context, arg CreateUserPointsParams) (UserPoint, error) {
	row := q.queryRow(ctx, q.createUserPointsStmt, createUserPoints, arg.UserID, arg.Points, arg.Description)
	var i UserPoint
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Points,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserPoints = `-- name: GetUserPoints :one
SELECT SUM(points) FROM user_points WHERE user_id = $1
`

func (q *Queries) GetUserPoints(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.queryRow(ctx, q.getUserPointsStmt, getUserPoints, userID)
	var sum int64
	err := row.Scan(&sum)
	return sum, err
}
