// Code generated by sqlc. DO NOT EDIT.
// source: users.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  email, encrypted_password
) VALUES (
  $1, $2
) RETURNING id, email, encrypted_password, reset_password_token, created_at, updated_at
`

type CreateUserParams struct {
	Email             string `json:"email"`
	EncryptedPassword string `json:"encrypted_password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser, arg.Email, arg.EncryptedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.EncryptedPassword,
		&i.ResetPasswordToken,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT
  users.id,
  users.email,
  SUM(user_points.points) as points
FROM users
INNER JOIN user_points ON users.id = user_points.user_id
WHERE users.email = $1
GROUP BY users.id
`

type GetUserByEmailRow struct {
	ID     uuid.UUID `json:"id"`
	Email  string    `json:"email"`
	Points int64     `json:"points"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.queryRow(ctx, q.getUserByEmailStmt, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(&i.ID, &i.Email, &i.Points)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT
  users.id,
  users.email,
  SUM(user_points.points) as points
FROM users
INNER JOIN user_points ON users.id = user_points.user_id
WHERE users.id = $1
GROUP BY users.id
`

type GetUserByIDRow struct {
	ID     uuid.UUID `json:"id"`
	Email  string    `json:"email"`
	Points int64     `json:"points"`
}

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (GetUserByIDRow, error) {
	row := q.queryRow(ctx, q.getUserByIDStmt, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(&i.ID, &i.Email, &i.Points)
	return i, err
}
